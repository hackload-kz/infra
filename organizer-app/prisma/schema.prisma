generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Hackathon {
  id                String                   @id @default(cuid())
  name              String
  slug              String                   @unique
  description       String?
  theme             String?
  startDate         DateTime
  endDate           DateTime
  registrationStart DateTime
  registrationEnd   DateTime
  maxTeamSize       Int                      @default(4)
  minTeamSize       Int                      @default(1)
  allowTeamChanges  Boolean                  @default(true)
  isActive          Boolean                  @default(true)
  isPublic          Boolean                  @default(true)
  logoUrl           String?
  bannerUrl         String?
  primaryColor      String?
  secondaryColor    String?
  createdAt         DateTime                 @default(now())
  updatedAt         DateTime                 @updatedAt
  dismissedBanners  DismissedBanner[]
  participations    HackathonParticipation[]
  joinRequests      JoinRequest[]
  journalEntries    JournalEntry[]
  messages          Message[]
  teams             Team[]

  @@map("hackathons")
}

model HackathonParticipation {
  id            String      @id @default(cuid())
  hackathonId   String
  participantId String
  registeredAt  DateTime    @default(now())
  isActive      Boolean     @default(true)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  hackathon     Hackathon   @relation(fields: [hackathonId], references: [id], onDelete: Cascade)
  participant   Participant @relation(fields: [participantId], references: [id], onDelete: Cascade)

  @@unique([hackathonId, participantId])
  @@map("hackathon_participations")
}

model Team {
  id           String        @id @default(cuid())
  name         String
  nickname     String        @unique
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  leaderId     String?       @unique
  comment      String?
  hackathonId  String
  level        TeamLevel?
  status       TeamStatus    @default(NEW)
  joinRequests JoinRequest[] @relation("TeamJoinRequests")
  messages     Message[]
  leader       Participant?  @relation("TeamLeader")
  members      Participant[] @relation("TeamMembers")
  hackathon    Hackathon     @relation(fields: [hackathonId], references: [id], onDelete: Cascade)

  @@map("teams")
}

model User {
  id          String       @id @default(cuid())
  email       String       @unique
  password    String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  participant Participant?

  @@map("users")
}

model Participant {
  id                      String                   @id @default(cuid())
  name                    String
  email                   String                   @unique
  city                    String?
  company                 String?
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  userId                  String                   @unique
  teamId                  String?
  ledTeamId               String?                  @unique
  cloudProviders          String?
  cloudServices           String?
  experienceLevel         String?
  otherCloudProviders     String?
  otherCloudServices      String?
  otherTechnologies       String?
  technologies            String?
  telegram                String?
  githubUrl               String?
  linkedinUrl             String?
  dismissedBanners        DismissedBanner[]
  hackathonParticipations HackathonParticipation[]
  joinRequests            JoinRequest[]            @relation("ParticipantJoinRequests")
  journalEntries          JournalEntry[]
  receivedMessages        Message[]                @relation("MessageRecipient")
  sentMessages            Message[]                @relation("MessageSender")
  ledTeam                 Team?                    @relation("TeamLeader", fields: [ledTeamId], references: [id])
  team                    Team?                    @relation("TeamMembers", fields: [teamId], references: [id])
  user                    User                     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("participants")
}

model JoinRequest {
  id            String            @id @default(cuid())
  status        JoinRequestStatus @default(PENDING)
  message       String?
  hackathonId   String
  participantId String
  teamId        String
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  hackathon     Hackathon         @relation(fields: [hackathonId], references: [id], onDelete: Cascade)
  participant   Participant       @relation("ParticipantJoinRequests", fields: [participantId], references: [id], onDelete: Cascade)
  team          Team              @relation("TeamJoinRequests", fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([participantId, teamId, hackathonId])
  @@map("join_requests")
}

model Message {
  id              String        @id @default(cuid())
  subject         String
  body            String
  status          MessageStatus @default(UNREAD)
  hackathonId     String
  senderId        String?
  recipientId     String
  parentMessageId String?
  teamId          String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  hackathon       Hackathon     @relation(fields: [hackathonId], references: [id], onDelete: Cascade)
  parentMessage   Message?      @relation("MessageReplies", fields: [parentMessageId], references: [id], onDelete: Cascade)
  replies         Message[]     @relation("MessageReplies")
  recipient       Participant   @relation("MessageRecipient", fields: [recipientId], references: [id], onDelete: Cascade)
  sender          Participant?  @relation("MessageSender", fields: [senderId], references: [id])
  team            Team?         @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model DismissedBanner {
  id            String      @id @default(cuid())
  bannerType    BannerType
  participantId String
  hackathonId   String
  dismissedAt   DateTime    @default(now())
  hackathon     Hackathon   @relation(fields: [hackathonId], references: [id], onDelete: Cascade)
  participant   Participant @relation(fields: [participantId], references: [id], onDelete: Cascade)

  @@unique([participantId, bannerType, hackathonId])
  @@map("dismissed_banners")
}

model JournalEntry {
  id            String           @id @default(cuid())
  eventType     JournalEventType
  title         String
  description   String?
  entityId      String?
  entityType    String?
  isRead        Boolean          @default(false)
  participantId String
  hackathonId   String
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  hackathon     Hackathon        @relation(fields: [hackathonId], references: [id], onDelete: Cascade)
  participant   Participant      @relation(fields: [participantId], references: [id], onDelete: Cascade)

  @@map("journal_entries")
}

enum TeamStatus {
  NEW
  INCOMPLETED
  FINISHED
  IN_REVIEW
  APPROVED
  CANCELED
  REJECTED
}

enum TeamLevel {
  BEGINNER
  ADVANCED
}

enum JoinRequestStatus {
  PENDING
  APPROVED
  DECLINED
}

enum MessageStatus {
  UNREAD
  READ
}

enum BannerType {
  TELEGRAM_PROFILE
  GITHUB_PROFILE
  FIND_TEAM
  TEAM_NEEDS_MEMBERS
  SET_TEAM_LEVEL
}

enum JournalEventType {
  PARTICIPANT_CREATED
  PROFILE_UPDATED
  MESSAGE_RECEIVED
  TEAM_CREATED
  TEAM_UPDATED
  TEAM_DELETED
  JOIN_REQUEST_CREATED
  JOIN_REQUEST_APPROVED
  JOIN_REQUEST_REJECTED
  JOINED_TEAM
  LEFT_TEAM
  INVITED_TO_TEAM
  TEAM_STATUS_UPDATED
  ADMIN_TEAM_EDIT
  SYSTEM_EVENT
}
