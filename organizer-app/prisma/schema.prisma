generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TeamStatus {
  NEW
  INCOMPLETED
  FINISHED
  IN_REVIEW
  APPROVED
  CANCELED
  REJECTED
}

enum TeamLevel {
  BEGINNER
  ADVANCED
}

enum JoinRequestStatus {
  PENDING
  APPROVED
  DECLINED
}

enum MessageStatus {
  UNREAD
  READ
}

model Hackathon {
  id          String @id @default(cuid())
  name        String
  slug        String @unique
  description String?
  theme       String? // e.g., "Building a ticket selling system"
  
  // Timing
  startDate         DateTime
  endDate           DateTime
  registrationStart DateTime
  registrationEnd   DateTime
  
  // Settings
  maxTeamSize       Int @default(4)
  minTeamSize       Int @default(1)
  allowTeamChanges  Boolean @default(true)
  isActive          Boolean @default(true)
  isPublic          Boolean @default(true)
  
  // Branding
  logoUrl          String?
  bannerUrl        String?
  primaryColor     String?
  secondaryColor   String?
  
  // Relations
  teams            Team[]
  participations   HackathonParticipation[]
  joinRequests     JoinRequest[]
  messages         Message[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("hackathons")
}

model HackathonParticipation {
  id            String @id @default(cuid())
  
  // Relations
  hackathon     Hackathon @relation(fields: [hackathonId], references: [id], onDelete: Cascade)
  hackathonId   String
  
  participant   Participant @relation(fields: [participantId], references: [id], onDelete: Cascade)
  participantId String
  
  // Participation details
  registeredAt  DateTime @default(now())
  isActive      Boolean @default(true)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([hackathonId, participantId])
  @@map("hackathon_participations")
}

model Team {
  id        String        @id @default(cuid())
  name      String
  nickname  String        @unique
  comment   String?
  status    TeamStatus    @default(NEW)
  level     TeamLevel?
  
  // Hackathon relation
  hackathon   Hackathon @relation(fields: [hackathonId], references: [id], onDelete: Cascade)
  hackathonId String
  
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  leaderId  String?       @unique
  leader    Participant?  @relation("TeamLeader")
  members   Participant[] @relation("TeamMembers")
  joinRequests JoinRequest[] @relation("TeamJoinRequests")
  messages  Message[]

  @@map("teams")
}

model User {
  id          String       @id @default(cuid())
  email       String       @unique
  password    String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  participant Participant?

  @@map("users")
}

model Participant {
  id                  String   @id @default(cuid())
  name                String
  email               String   @unique
  city                String?
  company             String?
  telegram            String?  // Telegram username or profile link
  githubUrl           String?  // GitHub or GitLab profile URL
  linkedinUrl         String?  // LinkedIn profile URL
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  userId              String   @unique
  teamId              String?
  ledTeamId           String?  @unique
  cloudProviders      String?
  cloudServices       String?
  experienceLevel     String?
  otherCloudProviders String?
  otherCloudServices  String?
  otherTechnologies   String?
  technologies        String?
  ledTeam             Team?    @relation("TeamLeader", fields: [ledTeamId], references: [id])
  team                Team?    @relation("TeamMembers", fields: [teamId], references: [id])
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  hackathonParticipations HackathonParticipation[]
  joinRequests        JoinRequest[] @relation("ParticipantJoinRequests")
  sentMessages        Message[] @relation("MessageSender")
  receivedMessages    Message[] @relation("MessageRecipient")

  @@map("participants")
}

model JoinRequest {
  id        String            @id @default(cuid())
  status    JoinRequestStatus @default(PENDING)
  message   String?           // Optional message from participant
  
  // Relations
  hackathon   Hackathon @relation(fields: [hackathonId], references: [id], onDelete: Cascade)
  hackathonId String

  participant   Participant @relation("ParticipantJoinRequests", fields: [participantId], references: [id], onDelete: Cascade)
  participantId String

  team   Team   @relation("TeamJoinRequests", fields: [teamId], references: [id], onDelete: Cascade)
  teamId String
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Unique constraint to prevent duplicate requests within same hackathon
  @@unique([participantId, teamId, hackathonId])
  @@map("join_requests")
}

model Message {
  id          String        @id @default(cuid())
  subject     String
  body        String        // HTML content
  status      MessageStatus @default(UNREAD)
  
  // Relations
  hackathon   Hackathon @relation(fields: [hackathonId], references: [id], onDelete: Cascade)
  hackathonId String
  
  sender      Participant? @relation("MessageSender", fields: [senderId], references: [id], onDelete: SetNull)
  senderId    String?
  
  recipient   Participant @relation("MessageRecipient", fields: [recipientId], references: [id], onDelete: Cascade)
  recipientId String
  
  // For threading replies
  parentMessage   Message? @relation("MessageReplies", fields: [parentMessageId], references: [id], onDelete: Cascade)
  parentMessageId String?
  replies         Message[] @relation("MessageReplies")
  
  // Team message (if sent to entire team)
  team     Team?   @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId   String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("messages")
}
