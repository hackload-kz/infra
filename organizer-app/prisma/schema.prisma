generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Hackathon {
  id                      String                   @id @default(cuid())
  name                    String
  slug                    String                   @unique
  description             String?
  theme                   String?
  startDate               DateTime
  endDate                 DateTime
  registrationStart       DateTime
  registrationEnd         DateTime
  maxTeamSize             Int                      @default(4)
  minTeamSize             Int                      @default(1)
  allowTeamChanges        Boolean                  @default(true)
  isActive                Boolean                  @default(true)
  isPublic                Boolean                  @default(true)
  logoUrl                 String?
  bannerUrl               String?
  primaryColor            String?
  secondaryColor          String?
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  calendarEventDismissals CalendarEventDismissal[]
  calendarEvents          CalendarEvent[]
  customBannerDismissals  CustomBannerDismissal[]
  customBanners           CustomBanner[]
  dismissedBanners        DismissedBanner[]
  participations          HackathonParticipation[]
  joinRequests            JoinRequest[]
  journalEntries          JournalEntry[]
  messages                Message[]
  teams                   Team[]

  @@map("hackathons")
}

model HackathonParticipation {
  id            String      @id @default(cuid())
  hackathonId   String
  participantId String
  registeredAt  DateTime    @default(now())
  isActive      Boolean     @default(true)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  hackathon     Hackathon   @relation(fields: [hackathonId], references: [id], onDelete: Cascade)
  participant   Participant @relation(fields: [participantId], references: [id], onDelete: Cascade)

  @@unique([hackathonId, participantId])
  @@map("hackathon_participations")
}

model Team {
  id                String                @id @default(cuid())
  name              String
  nickname          String                @unique
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt
  leaderId          String?               @unique
  comment           String?
  hackathonId       String
  level             TeamLevel?
  status            TeamStatus            @default(NEW)
  acceptedLanguages String[]              @default([])
  techStack         String[]              @default([])
  description       String?
  calendarEvents    CalendarEvent[]
  joinRequests      JoinRequest[]         @relation("TeamJoinRequests")
  messages          Message[]
  leader            Participant?          @relation("TeamLeader")
  members           Participant[]         @relation("TeamMembers")
  environmentData   TeamEnvironmentData[]
  hackathon         Hackathon             @relation(fields: [hackathonId], references: [id], onDelete: Cascade)
  testRuns          TestRun[]

  @@map("teams")
}

model User {
  id          String       @id @default(cuid())
  email       String       @unique
  password    String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  participant Participant?

  @@map("users")
}

model Participant {
  id                      String                   @id @default(cuid())
  name                    String
  email                   String                   @unique
  city                    String?
  company                 String?
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  userId                  String                   @unique
  teamId                  String?
  ledTeamId               String?                  @unique
  cloudProviders          String?
  cloudServices           String?
  experienceLevel         String?
  otherCloudProviders     String?
  otherCloudServices      String?
  otherTechnologies       String?
  technologies            String?
  telegram                String?
  githubUrl               String?
  linkedinUrl             String?
  isActive                Boolean                  @default(true)
  programmingLanguages    String[]                 @default([])
  databases               String[]                 @default([])
  description             String?
  calendarEventDismissals CalendarEventDismissal[]
  customBannerDismissals  CustomBannerDismissal[]
  dismissedBanners        DismissedBanner[]
  hackathonParticipations HackathonParticipation[]
  joinRequests            JoinRequest[]            @relation("ParticipantJoinRequests")
  journalEntries          JournalEntry[]
  receivedMessages        Message[]                @relation("MessageRecipient")
  sentMessages            Message[]                @relation("MessageSender")
  ledTeam                 Team?                    @relation("TeamLeader", fields: [ledTeamId], references: [id])
  team                    Team?                    @relation("TeamMembers", fields: [teamId], references: [id])
  user                    User                     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("participants")
}

model JoinRequest {
  id            String            @id @default(cuid())
  status        JoinRequestStatus @default(PENDING)
  message       String?
  hackathonId   String
  participantId String
  teamId        String
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  hackathon     Hackathon         @relation(fields: [hackathonId], references: [id], onDelete: Cascade)
  participant   Participant       @relation("ParticipantJoinRequests", fields: [participantId], references: [id], onDelete: Cascade)
  team          Team              @relation("TeamJoinRequests", fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([participantId, teamId, hackathonId])
  @@map("join_requests")
}

model Message {
  id              String        @id @default(cuid())
  subject         String
  body            String
  status          MessageStatus @default(UNREAD)
  hackathonId     String
  senderId        String?
  recipientId     String
  parentMessageId String?
  teamId          String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  hackathon       Hackathon     @relation(fields: [hackathonId], references: [id], onDelete: Cascade)
  parentMessage   Message?      @relation("MessageReplies", fields: [parentMessageId], references: [id], onDelete: Cascade)
  replies         Message[]     @relation("MessageReplies")
  recipient       Participant   @relation("MessageRecipient", fields: [recipientId], references: [id], onDelete: Cascade)
  sender          Participant?  @relation("MessageSender", fields: [senderId], references: [id])
  team            Team?         @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model CustomBanner {
  id           String                  @id @default(cuid())
  title        String
  description  String
  type         CustomBannerType
  displayStart DateTime
  displayEnd   DateTime
  allowDismiss Boolean                 @default(true)
  hackathonId  String
  isActive     Boolean                 @default(true)
  createdAt    DateTime                @default(now())
  updatedAt    DateTime                @updatedAt
  actionText   String?
  actionUrl    String?
  dismissals   CustomBannerDismissal[]
  hackathon    Hackathon               @relation(fields: [hackathonId], references: [id], onDelete: Cascade)

  @@map("custom_banners")
}

model CustomBannerDismissal {
  id             String       @id @default(cuid())
  customBannerId String
  participantId  String
  hackathonId    String
  dismissedAt    DateTime     @default(now())
  customBanner   CustomBanner @relation(fields: [customBannerId], references: [id], onDelete: Cascade)
  hackathon      Hackathon    @relation(fields: [hackathonId], references: [id], onDelete: Cascade)
  participant    Participant  @relation(fields: [participantId], references: [id], onDelete: Cascade)

  @@unique([customBannerId, participantId, hackathonId])
  @@map("custom_banner_dismissals")
}

model DismissedBanner {
  id            String      @id @default(cuid())
  bannerType    BannerType
  participantId String
  hackathonId   String
  dismissedAt   DateTime    @default(now())
  hackathon     Hackathon   @relation(fields: [hackathonId], references: [id], onDelete: Cascade)
  participant   Participant @relation(fields: [participantId], references: [id], onDelete: Cascade)

  @@unique([participantId, bannerType, hackathonId])
  @@map("dismissed_banners")
}

model JournalEntry {
  id            String           @id @default(cuid())
  eventType     JournalEventType
  title         String
  description   String?
  entityId      String?
  entityType    String?
  isRead        Boolean          @default(false)
  participantId String
  hackathonId   String
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  hackathon     Hackathon        @relation(fields: [hackathonId], references: [id], onDelete: Cascade)
  participant   Participant      @relation(fields: [participantId], references: [id], onDelete: Cascade)

  @@map("journal_entries")
}

model CalendarEvent {
  id           String                   @id @default(cuid())
  title        String
  description  String
  eventDate    DateTime
  eventEndDate DateTime?
  link         String?
  eventType    CalendarEventType        @default(INFO)
  isActive     Boolean                  @default(true)
  hackathonId  String
  teamId       String?
  createdAt    DateTime                 @default(now())
  updatedAt    DateTime                 @updatedAt
  dismissals   CalendarEventDismissal[]
  hackathon    Hackathon                @relation(fields: [hackathonId], references: [id], onDelete: Cascade)
  team         Team?                    @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@map("calendar_events")
}

model CalendarEventDismissal {
  id            String        @id @default(cuid())
  eventId       String
  participantId String
  hackathonId   String
  dismissedAt   DateTime      @default(now())
  event         CalendarEvent @relation(fields: [eventId], references: [id], onDelete: Cascade)
  hackathon     Hackathon     @relation(fields: [hackathonId], references: [id], onDelete: Cascade)
  participant   Participant   @relation(fields: [participantId], references: [id], onDelete: Cascade)

  @@unique([eventId, participantId, hackathonId])
  @@map("calendar_event_dismissals")
}

model TeamEnvironmentData {
  id          String   @id @default(cuid())
  teamId      String
  key         String
  value       String
  description String?
  category    String?
  isSecure    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String?
  updatedBy   String?
  team        Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([teamId, key])
  @@map("team_environment_data")
}

model ServiceApiKey {
  id          String               @id @default(cuid())
  name        String
  keyHash     String               @unique
  keyPrefix   String
  description String?
  permissions String[]             @default(["environment:write"])
  isActive    Boolean              @default(true)
  lastUsedAt  DateTime?
  expiresAt   DateTime?
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  createdBy   String?
  usageLogs   ServiceApiKeyUsage[]

  @@map("service_api_keys")
}

model ServiceApiKeyUsage {
  id        String        @id @default(cuid())
  keyId     String
  endpoint  String
  method    String
  userAgent String?
  ipAddress String?
  teamId    String?
  success   Boolean
  createdAt DateTime      @default(now())
  apiKey    ServiceApiKey @relation(fields: [keyId], references: [id], onDelete: Cascade)

  @@map("service_api_key_usage")
}

model TestScenario {
  id          String             @id @default(cuid())
  name        String
  identifier  String             @unique
  description String?
  isActive    Boolean            @default(true)
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  createdBy   String?
  testRuns    TestRun[]
  steps       TestScenarioStep[]

  @@map("test_scenarios")
}

model TestScenarioStep {
  id          String       @id @default(cuid())
  scenarioId  String
  name        String
  description String?
  stepType    TestStepType
  stepOrder   Int
  config      Json
  isActive    Boolean      @default(true)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  scenario    TestScenario @relation(fields: [scenarioId], references: [id], onDelete: Cascade)

  @@unique([scenarioId, stepOrder])
  @@map("test_scenario_steps")
}

model TestRun {
  id          String        @id @default(cuid())
  scenarioId  String
  teamId      String
  runNumber   Int           @unique @default(1) // Global sequential run number across all tests
  comment     String?
  status      TestRunStatus @default(PENDING)
  startedAt   DateTime?
  completedAt DateTime?
  results     Json?
  k6TestName  String?       // Name of the K6 TestRun in Kubernetes
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  createdBy   String?
  scenario    TestScenario  @relation(fields: [scenarioId], references: [id], onDelete: Cascade)
  team        Team          @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@map("test_runs")
}

enum TeamStatus {
  NEW
  INCOMPLETED
  FINISHED
  IN_REVIEW
  APPROVED
  CANCELED
  REJECTED
}

enum TeamLevel {
  BEGINNER
  ADVANCED
}

enum JoinRequestStatus {
  PENDING
  APPROVED
  DECLINED
}

enum MessageStatus {
  UNREAD
  READ
}

enum BannerType {
  TELEGRAM_PROFILE
  GITHUB_PROFILE
  FIND_TEAM
  TEAM_NEEDS_MEMBERS
  SET_TEAM_LEVEL
}

enum CustomBannerType {
  INFO
  WARN
}

enum JournalEventType {
  PARTICIPANT_CREATED
  PROFILE_UPDATED
  MESSAGE_RECEIVED
  TEAM_CREATED
  TEAM_UPDATED
  TEAM_DELETED
  JOIN_REQUEST_CREATED
  JOIN_REQUEST_APPROVED
  JOIN_REQUEST_REJECTED
  JOINED_TEAM
  LEFT_TEAM
  INVITED_TO_TEAM
  TEAM_STATUS_UPDATED
  ADMIN_TEAM_EDIT
  SYSTEM_EVENT
  TEAM_ENVIRONMENT_UPDATED
  TEAM_ENVIRONMENT_DELETED
}

enum CalendarEventType {
  INFO
  WARNING
  DEADLINE
}

enum TestStepType {
  k6_script
  http_request
}

enum TestRunStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
}
