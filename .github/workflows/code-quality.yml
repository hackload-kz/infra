name: Code Quality

on:
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    # Allow manual triggering of the workflow
  workflow_call:
    # Allow this workflow to be called from other workflows

env:
  REGISTRY: ghcr.io
  BASE_IMAGE_NAME: ${{ vars.BASE_IMAGE_NAME || 'hackload-kz/infra-base' }}

jobs:
  determine-base-image:
    runs-on: [self-hosted]
    outputs:
      base-image-tag: ${{ steps.base-image.outputs.tag }}
      base-image-full: ${{ steps.base-image.outputs.full }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Determine base image tag
      id: base-image
      run: |
        PACKAGE_HASH=$(sha256sum organizer-app/package.json organizer-app/package-lock.json | sha256sum | cut -d' ' -f1)
        PKG_TAG="pkg-$PACKAGE_HASH"
        BASE_IMAGE_REPO="ghcr.io/${{ env.BASE_IMAGE_NAME }}"
        
        echo "🔍 Checking for base image with package hash: $PKG_TAG"
        echo "📦 Package hash: $PACKAGE_HASH"
        
        # Use package-specific base image tag
        echo "tag=$PKG_TAG" >> $GITHUB_OUTPUT
        echo "full=$BASE_IMAGE_REPO:$PKG_TAG" >> $GITHUB_OUTPUT
        echo "✅ Using base image: $PKG_TAG"

  lint-and-type-check:
    runs-on: [self-hosted]
    needs: [determine-base-image]
    
    # Alternative approach: run directly on runner and use Docker for individual steps
    # This avoids the container user permission issues

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run quality checks in container
      run: |
        # Use the base image in a more controlled way
        BASE_IMAGE="${{ needs.determine-base-image.outputs.base-image-full }}"
        echo "Using base image: $BASE_IMAGE"
        
        # Run the entire quality check pipeline in one container execution
        # Use root user to avoid permission issues, but set npm cache to writable location
        docker run --rm \
          --entrypoint="" \
          -v "$GITHUB_WORKSPACE:/workspace" \
          -w /workspace/organizer-app \
          -e NPM_CONFIG_CACHE="/tmp/.npm" \
          -e NPM_CONFIG_PREFIX="/tmp/.npm-global" \
          -e DATABASE_URL="postgresql://test:test@localhost:5432/test" \
          -e NEXTAUTH_URL="http://localhost:3000" \
          -e NEXTAUTH_SECRET="test-secret-key-for-testing-only" \
          -e ADMIN_USERS="admin@hackload.kz,organizer@hackload.kz" \
          "$BASE_IMAGE" \
          sh -c '
            set -e
            # Ensure npm directories are writable and add to PATH
            mkdir -p /tmp/.npm /tmp/.npm-global/bin
            export PATH="/tmp/.npm-global/bin:$PATH"
            
            echo "📦 Installing dependencies..."
            echo "🔍 Checking file permissions..."
            ls -la package.json package-lock.json || echo "Missing package files"
            
            echo "🔧 Running npm ci..."
            if ! npm ci --include=dev --no-audit --no-fund 2>&1; then
              echo "❌ npm ci failed, trying npm install..."
              rm -rf node_modules package-lock.json
              npm install --include=dev --no-audit --no-fund
            fi
            
            echo "🏗️  Generating Prisma Client..."
            npx prisma generate
            
            echo "🔍 Running ESLint..."
            npm run lint
            
            echo "🔍 Type checking..."
            npx tsc --noEmit
            
            echo "🧪 Running tests..."
            npm run test:coverage
            
            echo "🏗️  Building application..."
            npm run build
            
            echo "✅ All quality checks passed!"
          '

  quality-summary:
    runs-on: [self-hosted]
    needs: [determine-base-image, lint-and-type-check]
    if: always()
    
    steps:
    - name: Quality Check Summary
      run: |
        echo "### Code Quality Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **ESLint**: ${{ needs.lint-and-type-check.result == 'success' && '✅ Passed' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
        echo "- **TypeScript**: ${{ needs.lint-and-type-check.result == 'success' && '✅ Passed' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Tests**: ${{ needs.lint-and-type-check.result == 'success' && '✅ Passed' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Build**: ${{ needs.lint-and-type-check.result == 'success' && '✅ Passed' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Base Image**: ${{ needs.determine-base-image.outputs.base-image-full }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Base Image Tag**: ${{ needs.determine-base-image.outputs.base-image-tag }}" >> $GITHUB_STEP_SUMMARY
