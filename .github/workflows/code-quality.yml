name: Code Quality

on:
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    # Allow manual triggering of the workflow
  workflow_call:
    # Allow this workflow to be called from other workflows

env:
  REGISTRY: ghcr.io
  BASE_IMAGE_NAME: ${{ vars.BASE_IMAGE_NAME || 'hackload-kz/infra-base' }}

jobs:
  determine-base-image:
    runs-on: [self-hosted]
    outputs:
      base-image-tag: ${{ steps.base-image.outputs.tag }}
      base-image-full: ${{ steps.base-image.outputs.full }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Determine base image tag
      id: base-image
      run: |
        PACKAGE_HASH=$(sha256sum organizer-app/package.json organizer-app/package-lock.json | sha256sum | cut -d' ' -f1)
        PKG_TAG="pkg-$PACKAGE_HASH"
        BASE_IMAGE_REPO="ghcr.io/${{ env.BASE_IMAGE_NAME }}"
        
        echo "🔍 Checking for base image with package hash: $PKG_TAG"
        echo "📦 Package hash: $PACKAGE_HASH"
        
        # Use package-specific base image tag
        echo "tag=$PKG_TAG" >> $GITHUB_OUTPUT
        echo "full=$BASE_IMAGE_REPO:$PKG_TAG" >> $GITHUB_OUTPUT
        echo "✅ Using base image: $PKG_TAG"

  lint-and-type-check:
    runs-on: [self-hosted]
    needs: [determine-base-image]
    
    # Alternative approach: run directly on runner and use Docker for individual steps
    # This avoids the container user permission issues

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}      

    - name: Build temporary image with source code
      run: |
        BASE_IMAGE="${{ needs.determine-base-image.outputs.base-image-full }}"
        echo "Using base image: $BASE_IMAGE"
        
        # Create temporary Dockerfile that copies source and runs quality checks
        cat > Dockerfile.quality << 'EOF'
        ARG BASE_IMAGE
        FROM $BASE_IMAGE
        
        # Copy source code to container
        COPY organizer-app /app
        WORKDIR /app
        
        # Set environment variables
        ENV DATABASE_URL="postgresql://test:test@localhost:5432/test"
        ENV NEXTAUTH_URL="http://localhost:3000"
        ENV NEXTAUTH_SECRET="test-secret-key-for-testing-only"
        ENV ADMIN_USERS="admin@hackload.kz,organizer@hackload.kz"
        
        # Run quality checks
        RUN set -e && \
            echo "📦 Installing dependencies..." && \
            npm ci --include=dev --no-audit --no-fund && \
            echo "🏗️  Generating Prisma Client..." && \
            npx prisma generate && \
            echo "🔍 Running ESLint..." && \
            npm run lint && \
            echo "🔍 Type checking..." && \
            npx tsc --noEmit && \
            echo "🧪 Running tests..." && \
            npm run test:coverage && \
            echo "🏗️  Building application..." && \
            NODE_OPTIONS="--max_old_space_size=4096" npm run build && \
            echo "✅ All quality checks passed!"
        EOF
        
        # Build image - this will run all quality checks
        docker build \
          --build-arg BASE_IMAGE="$BASE_IMAGE" \
          -f Dockerfile.quality \
          -t quality-check:${{ github.run_id }} \
          .
        
        # Clean up temporary files
        rm -f Dockerfile.quality
        docker rmi quality-check:${{ github.run_id }} || true

  quality-summary:
    runs-on: [self-hosted]
    needs: [determine-base-image, lint-and-type-check]
    if: always()
    
    steps:
    - name: Quality Check Summary
      run: |
        echo "### Code Quality Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **ESLint**: ${{ needs.lint-and-type-check.result == 'success' && '✅ Passed' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
        echo "- **TypeScript**: ${{ needs.lint-and-type-check.result == 'success' && '✅ Passed' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Tests**: ${{ needs.lint-and-type-check.result == 'success' && '✅ Passed' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Build**: ${{ needs.lint-and-type-check.result == 'success' && '✅ Passed' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Base Image**: ${{ needs.determine-base-image.outputs.base-image-full }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Base Image Tag**: ${{ needs.determine-base-image.outputs.base-image-tag }}" >> $GITHUB_STEP_SUMMARY
