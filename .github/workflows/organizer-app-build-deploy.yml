name: Build and Deploy Docker Image

on:
  push:
    branches: [ main ]
    paths:
      - 'organizer-app/**'
      - '.github/workflows/organizer-app-build-deploy.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'organizer-app/**'
      - '.github/workflows/organizer-app-build-deploy.yml'
  workflow_dispatch:
    inputs:
      image_tag:
        description: 'Docker image tag to deploy'
        required: false
        default: ''
      base_image_tag:
        description: 'Base image tag to use (e.g., latest, stable, pkg-hash)'
        required: false
        default: ''
      force_base_rebuild:
        description: 'Force rebuild base image even if it exists'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: docker.io
  IMAGE_NAME: ${{ vars.DOCKERHUB_ORGANIZATION || 'drimdev' }}/organizer-app
  BASE_IMAGE_NAME: ${{ vars.DOCKERHUB_ORGANIZATION || 'drimdev' }}/infra-base

jobs:
  # quality-gate:
  #   uses: ./.github/workflows/code-quality.yml
  #   permissions:
  #     contents: read
  #     packages: read

  build-and-push:
    runs-on: [self-hosted]
    # needs: [quality-gate]
    permissions:
      contents: read
      packages: write
      actions: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    # Enhanced base image existence check and strategy
    - name: Check base image availability
      id: check-base
      run: |
        BASE_IMAGE_REPO="${{ env.REGISTRY }}/${{ env.BASE_IMAGE_NAME }}"
        PACKAGE_HASH=$(sha256sum organizer-app/package.json organizer-app/package-lock.json | sha256sum | cut -d' ' -f1)
        echo "package-hash=$PACKAGE_HASH" >> $GITHUB_OUTPUT
        echo "base-image-repo=$BASE_IMAGE_REPO" >> $GITHUB_OUTPUT
        echo "üè∑Ô∏è Using base image repository: $BASE_IMAGE_REPO"
        echo "üî¢ Package hash: $PACKAGE_HASH"
        
        # Function to check if image exists
        check_image_exists() {
          local tag=$1
          echo "üîç Checking if image exists: $BASE_IMAGE_REPO:$tag"
          
          # Try multiple methods to check image existence
          if docker manifest inspect "$BASE_IMAGE_REPO:$tag" > /dev/null 2>&1; then
            echo "‚úÖ Image exists via docker manifest: $tag"
            return 0
          fi
          
          # Fallback: try with crane
          if command -v crane > /dev/null 2>&1; then
            if crane manifest "$BASE_IMAGE_REPO:$tag" > /dev/null 2>&1; then
              echo "‚úÖ Image exists via crane: $tag"
              return 0
            fi
          fi
          
          # Final fallback: try curl to check Docker Hub registry
          if curl -sf -H "Authorization: Bearer ${{ secrets.DOCKERHUB_TOKEN }}" \
                  "https://index.docker.io/v2/${{ env.BASE_IMAGE_NAME }}/manifests/$tag" > /dev/null 2>&1; then
            echo "‚úÖ Image exists via API: $tag"
            return 0
          fi
          
          echo "‚ùå Image does not exist: $tag"
          return 1
        }
        
        # Check if custom base image tag is provided
        if [[ -n "${{ github.event.inputs.base_image_tag }}" ]]; then
          CUSTOM_TAG="${{ github.event.inputs.base_image_tag }}"
          echo "base-image-tag=$CUSTOM_TAG" >> $GITHUB_OUTPUT
          echo "using-custom-tag=true" >> $GITHUB_OUTPUT
          echo "üéØ Using custom base image tag: $CUSTOM_TAG"
          
          if check_image_exists "$CUSTOM_TAG"; then
            echo "base-image-available=true" >> $GITHUB_OUTPUT
            echo "needs-base-build=false" >> $GITHUB_OUTPUT
          else
            echo "base-image-available=false" >> $GITHUB_OUTPUT
            echo "needs-base-build=true" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è Custom base image tag '$CUSTOM_TAG' not found"
          fi
        else
          echo "using-custom-tag=false" >> $GITHUB_OUTPUT
          # Use automatic logic based on package hash
          PKG_TAG="pkg-$PACKAGE_HASH"
          
          echo "üîç Checking for package-specific base image: $PKG_TAG"
          if check_image_exists "$PKG_TAG"; then
            echo "base-image-available=true" >> $GITHUB_OUTPUT
            echo "base-image-tag=$PKG_TAG" >> $GITHUB_OUTPUT
            echo "needs-base-build=false" >> $GITHUB_OUTPUT
            echo "‚úÖ Found package-specific base image: $PKG_TAG"
          else
            echo "‚ùå Package-specific base image not found: $PKG_TAG"
            
            # Check if 'latest' exists as fallback
            echo "üîç Checking for 'latest' base image as fallback"
            if check_image_exists "latest"; then
              echo "base-image-available=true" >> $GITHUB_OUTPUT
              echo "base-image-tag=latest" >> $GITHUB_OUTPUT
              echo "needs-base-build=true" >> $GITHUB_OUTPUT
              echo "‚ö†Ô∏è Using 'latest' base image, but will trigger rebuild for package-specific version"
            else
              echo "base-image-available=false" >> $GITHUB_OUTPUT
              echo "base-image-tag=latest" >> $GITHUB_OUTPUT
              echo "needs-base-build=true" >> $GITHUB_OUTPUT
              echo "‚ùå No base image found at all - must build from scratch"
            fi
          fi
        fi
        
        # Show available tags for debugging
        echo "üìã Available base image tags:"
        docker run --rm gcr.io/go-containerregistry/crane:latest ls "$BASE_IMAGE_REPO" 2>/dev/null | head -10 || echo "Could not list tags (image might not exist yet)"

    # Trigger base image build if needed
    - name: Trigger base image build
      if: |
        steps.check-base.outputs.needs-base-build == 'true' ||
        github.event.inputs.force_base_rebuild == 'true'
      uses: actions/github-script@v7
      with:
        script: |
          const { owner, repo } = context.repo;
          const needsBaseBuild = '${{ steps.check-base.outputs.needs-base-build }}';
          const forceRebuild = '${{ github.event.inputs.force_base_rebuild }}';
          const baseImageAvailable = '${{ steps.check-base.outputs.base-image-available }}';
          const packageHash = '${{ steps.check-base.outputs.package-hash }}';
          
          console.log('üî® Triggering base image build...');
          console.log(`Needs base build: ${needsBaseBuild}`);
          console.log(`Force rebuild: ${forceRebuild}`);
          console.log(`Base image available: ${baseImageAvailable}`);
          console.log(`Package hash: ${packageHash}`);
          
          try {
            const response = await github.rest.actions.createWorkflowDispatch({
              owner,
              repo,
              workflow_id: 'base-image-build.yml',
              ref: context.ref,
              inputs: {
                force_rebuild: forceRebuild === 'true' ? 'true' : 'false'
              }
            });
            
            console.log('‚úÖ Base image build triggered successfully');
            console.log(`API Response status: ${response.status}`);
            
            // Set output for the waiting step
            core.setOutput('build-triggered', 'true');
          } catch (error) {
            console.error('‚ùå Failed to trigger base image build:', error);
            core.setFailed(`Failed to trigger base image build: ${error.message}`);
          }

    # Wait for base image build completion
    - name: Wait for base image build completion
      id: wait-base-build
      if: |
        steps.check-base.outputs.needs-base-build == 'true' ||
        github.event.inputs.force_base_rebuild == 'true'
      run: |
        echo "‚è≥ Waiting for base image build to complete..."
        
        PACKAGE_HASH="${{ steps.check-base.outputs.package-hash }}"
        PKG_TAG="pkg-$PACKAGE_HASH"
        BASE_IMAGE_REPO="${{ steps.check-base.outputs.base-image-repo }}"
        USING_CUSTOM_TAG="${{ steps.check-base.outputs.using-custom-tag }}"
        CUSTOM_TAG="${{ github.event.inputs.base_image_tag }}"
        
        # Determine what tag to wait for
        if [[ "$USING_CUSTOM_TAG" == "true" && -n "$CUSTOM_TAG" ]]; then
          TARGET_TAG="$CUSTOM_TAG"
          echo "üéØ Waiting for custom tag: $TARGET_TAG"
        else
          TARGET_TAG="$PKG_TAG"
          echo "üéØ Waiting for package-specific tag: $TARGET_TAG"
        fi
        
        # Function to check if target image exists
        check_target_image() {
          local tag=$1
          if docker manifest inspect "$BASE_IMAGE_REPO:$tag" > /dev/null 2>&1; then
            return 0
          fi
          
          # Also check with crane as fallback
          if command -v crane > /dev/null 2>&1; then
            if crane manifest "$BASE_IMAGE_REPO:$tag" > /dev/null 2>&1; then
              return 0
            fi
          fi
          
          return 1
        }
        
        # Wait up to 15 minutes for the workflow to complete
        MAX_ATTEMPTS=90
        SLEEP_INTERVAL=10
        
        for i in $(seq 1 $MAX_ATTEMPTS); do
          echo "üîç Checking build progress... (attempt $i/$MAX_ATTEMPTS)"
          
          if check_target_image "$TARGET_TAG"; then
            echo "‚úÖ Base image build completed successfully!"
            echo "üè∑Ô∏è Image available: $BASE_IMAGE_REPO:$TARGET_TAG"
            
            # Also check if latest tag was updated
            if [[ "$TARGET_TAG" != "latest" ]]; then
              if check_target_image "latest"; then
                echo "‚úÖ Latest tag also updated: $BASE_IMAGE_REPO:latest"
              fi
            fi
            
            exit 0
          fi
          
          # Show progress every 5th attempt
          if [[ $((i % 5)) -eq 0 ]]; then
            echo "üìä Progress update ($i/$MAX_ATTEMPTS attempts):"
            echo "   Target: $BASE_IMAGE_REPO:$TARGET_TAG"
            
            # Show latest available tags
            echo "üìã Current available tags:"
            docker run --rm gcr.io/go-containerregistry/crane:latest ls "$BASE_IMAGE_REPO" 2>/dev/null | head -5 || echo "   Could not list tags"
          fi
          
          if [[ $i -lt $MAX_ATTEMPTS ]]; then
            sleep $SLEEP_INTERVAL
          fi
        done
        
        echo "‚ùå Timeout waiting for base image build (${MAX_ATTEMPTS} attempts over $((MAX_ATTEMPTS * SLEEP_INTERVAL / 60)) minutes)"
        echo "üîç Final available base images:"
        docker run --rm gcr.io/go-containerregistry/crane:latest ls "$BASE_IMAGE_REPO" | head -10 || echo "Could not list tags"
        
        # Don't fail completely - we might be able to use 'latest' as fallback
        if [[ "$TARGET_TAG" != "latest" ]] && check_target_image "latest"; then
          echo "‚ö†Ô∏è Target image not found, but 'latest' is available"
          echo "üîÑ Will continue with 'latest' base image"
          echo "base-image-tag=latest" >> $GITHUB_OUTPUT
        else
          echo "üí• No usable base image available - build cannot continue"
          exit 1
        fi

    # Fallback: Use latest if custom tag doesn't exist and we can't rebuild
    - name: Fallback to latest base image
      if: |
        steps.check-base.outputs.base-image-available == 'false' && 
        steps.check-base.outputs.using-custom-tag == 'true' &&
        github.event.inputs.force_base_rebuild != 'true'
      run: |
        echo "‚ö†Ô∏è Custom base image tag not available and no rebuild forced"
        echo "üîÑ Falling back to 'latest' base image"
        echo "base-image-tag=latest" >> $GITHUB_OUTPUT
      id: fallback-base


    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è Buildx –¥–ª—è –±—ã—Å—Ç—Ä–æ–π —Å–±–æ—Ä–∫–∏
        driver-opts: |
          network=host
          env.BUILDKIT_STEP_LOG_MAX_SIZE=50000000
          env.BUILDKIT_STEP_LOG_MAX_SPEED=10000000
        config-inline: |
          [worker.oci]
            max-parallelism = 4
          [worker.containerd]
            max-parallelism = 4


    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix=sha-
          type=raw,value=latest,enable={{is_default_branch}}

    # Final base image tag resolution
    - name: Resolve final base image tag
      id: final-base-tag
      run: |
        # Priority order: wait-step output -> fallback-step output -> check-base output
        WAIT_TAG="${{ steps.wait-base-build.outputs.base-image-tag || '' }}"
        FALLBACK_TAG="${{ steps.fallback-base.outputs.base-image-tag || '' }}"
        CHECK_TAG="${{ steps.check-base.outputs.base-image-tag || 'latest' }}"
        
        if [[ -n "$WAIT_TAG" ]]; then
          FINAL_TAG="$WAIT_TAG"
          echo "üéØ Using tag from wait step: $FINAL_TAG"
        elif [[ -n "$FALLBACK_TAG" ]]; then
          FINAL_TAG="$FALLBACK_TAG"
          echo "üéØ Using fallback tag: $FINAL_TAG"
        else
          FINAL_TAG="$CHECK_TAG"
          echo "üéØ Using original check tag: $FINAL_TAG"
        fi
        
        echo "final-base-tag=$FINAL_TAG" >> $GITHUB_OUTPUT
        echo "üì¶ Final base image: ${{ steps.check-base.outputs.base-image-repo }}:$FINAL_TAG"
        
        # Verify the final image exists before proceeding
        BASE_IMAGE_REPO="${{ steps.check-base.outputs.base-image-repo }}"
        echo "üîç Verifying final base image exists: $BASE_IMAGE_REPO:$FINAL_TAG"
        
        if docker manifest inspect "$BASE_IMAGE_REPO:$FINAL_TAG" > /dev/null 2>&1; then
          echo "‚úÖ Final base image verified and available"
        else
          echo "‚ùå Final base image not available: $BASE_IMAGE_REPO:$FINAL_TAG"
          echo "üìã Available tags:"
          docker run --rm gcr.io/go-containerregistry/crane:latest ls "$BASE_IMAGE_REPO" 2>/dev/null | head -10 || echo "Could not list tags"
          exit 1
        fi

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: organizer-app
        file: organizer-app/Dockerfile.optimized
        # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: —Å–æ–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ AMD64 –¥–ª—è –±—ã—Å—Ç—Ä–æ—Ç—ã (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å ARM64 –ø–æ–∑–∂–µ)
        platforms: linux/amd64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        # Build arguments for base image
        build-args: |
          BASE_IMAGE_TAG=${{ steps.final-base-tag.outputs.final-base-tag }}
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º
        build-contexts: |
          alpine=docker-image://alpine:latest

    - name: Generate deployment artifact
      env:
        GITHUB_SHA: ${{ github.sha }}
      run: |
        echo "IMAGE_TAG=sha-${GITHUB_SHA::7}" >> deployment.env
        echo "IMAGE_URL=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:sha-${GITHUB_SHA::7}" >> deployment.env
    - name: Upload deployment artifact
      uses: actions/upload-artifact@v4
      with:
        name: deployment-info
        path: deployment.env

    - name: Build Summary
      run: |
        echo "### üöÄ Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Quality Gate**: ${{ needs.quality-gate.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Application Image**: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_STEP_SUMMARY
        echo "- **Base Image Used**: ${{ steps.check-base.outputs.base-image-repo }}:${{ steps.final-base-tag.outputs.final-base-tag }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Package Hash**: ${{ steps.check-base.outputs.package-hash }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Base Image Strategy**: ${{ steps.check-base.outputs.using-custom-tag == 'true' && 'Custom Tag' || 'Package Hash' }}" >> $GITHUB_STEP_SUMMARY
        if [[ "${{ steps.check-base.outputs.using-custom-tag }}" == "true" ]]; then
          echo "- **Custom Tag**: ${{ github.event.inputs.base_image_tag }}" >> $GITHUB_STEP_SUMMARY
        fi
        echo "- **Base Image Was Available**: ${{ steps.check-base.outputs.base-image-available == 'true' && '‚úÖ Yes' || '‚ùå No' }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Base Build Triggered**: ${{ steps.check-base.outputs.needs-base-build == 'true' && '‚úÖ Yes' || '‚ùå No' }}" >> $GITHUB_STEP_SUMMARY
        if [[ "${{ github.event.inputs.force_base_rebuild }}" == "true" ]]; then
          echo "- **Force Rebuild**: ‚úÖ Yes" >> $GITHUB_STEP_SUMMARY
        fi

  deploy:
    runs-on: [self-hosted]
    needs: [build-and-push]
    if: github.ref == 'refs/heads/main'
    
    permissions:
      contents: read
      packages: read

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download deployment artifact
      uses: actions/download-artifact@v4
      with:
        name: deployment-info

    - name: Load deployment info
      run: |
        source deployment.env
        echo "IMAGE_TAG_FROM_BUILD=$IMAGE_TAG" >> $GITHUB_ENV

    - name: Determine image tag
      id: image_tag
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" && -n "${{ github.event.inputs.image_tag }}" ]]; then
          echo "tag=${{ github.event.inputs.image_tag }}" >> $GITHUB_OUTPUT
        else
          echo "tag=$IMAGE_TAG_FROM_BUILD" >> $GITHUB_OUTPUT
        fi

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Configure kubectl
      run: |
        mkdir -p ~/.kube
        echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > ~/.kube/config
        chmod 600 ~/.kube/config

    - name: Verify kubectl connection
      run: |
        kubectl cluster-info
        kubectl get nodes

    - name: Update email secrets
      run: |
        kubectl create secret generic email-secrets \
          --from-literal=SMTP_SERVER="${{ secrets.SMTP_SERVER }}" \
          --from-literal=SMTP_PORT="${{ secrets.SMTP_PORT }}" \
          --from-literal=SENDER_EMAIL="${{ secrets.SENDER_EMAIL }}" \
          --from-literal=SENDER_PASSWORD="${{ secrets.SENDER_PASSWORD }}" \
          --from-literal=SENDER_NAME="${{ secrets.SENDER_NAME }}" \
          -n hub \
          --dry-run=client -o yaml | kubectl apply -f -

    - name: Update deployment image
      run: |
        kubectl set image deployment/hub \
          hub=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.image_tag.outputs.tag }} \
          -n hub
        
        echo "Updated deployment with image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.image_tag.outputs.tag }}"

    - name: Wait for rollout
      run: |
        kubectl rollout status deployment/hub -n hub --timeout=300s

    - name: Verify deployment
      run: |
        kubectl get pods -n hub -l app=hub
        kubectl get deployment hub -n hub -o wide
        echo "Deployment successful!"

    - name: Get deployment info
      run: |
        echo "### Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Image**: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.image_tag.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Namespace**: hub" >> $GITHUB_STEP_SUMMARY
        echo "- **Deployment**: hub" >> $GITHUB_STEP_SUMMARY
        echo "- **Status**: $(kubectl get deployment hub -n hub -o jsonpath='{.status.conditions[?(@.type=="Available")].status}')" >> $GITHUB_STEP_SUMMARY
        echo "- **Ready Replicas**: $(kubectl get deployment hub -n hub -o jsonpath='{.status.readyReplicas}')/$(kubectl get deployment hub -n hub -o jsonpath='{.spec.replicas}')" >> $GITHUB_STEP_SUMMARY

  notify-failure:
    runs-on: [self-hosted]
    if: failure()
    needs: [build-and-push, deploy]
    steps:
    - name: Notify on failure
      run: |
        echo "### ‚ùå Build and Deploy Workflow Failed" >> $GITHUB_STEP_SUMMARY
        echo "- **Workflow**: ${{ github.workflow }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Run ID**: ${{ github.run_id }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
