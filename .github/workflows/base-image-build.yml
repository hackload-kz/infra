name: Build Base Image

on:
  push:
    paths:
      - 'organizer-app/package.json'
      - 'organizer-app/package-lock.json'
      - 'organizer-app/Dockerfile.base'
      - '.github/workflows/base-image-build.yml'
  pull_request:
    paths:
      - 'organizer-app/package.json'
      - 'organizer-app/package-lock.json'
      - 'organizer-app/Dockerfile.base'
  schedule:
    # Run daily at 2 AM UTC to rebuild base image if needed
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      force_rebuild:
        description: 'Force rebuild even if no changes'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  BASE_IMAGE_NAME: ${{ vars.BASE_IMAGE_NAME || github.repository_owner }}/infra-base

jobs:
  build-base-image:
    runs-on: [self-hosted]
    permissions:
      contents: read
      packages: write
      id-token: write
      attestations: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        driver-opts: |
          network=host
          env.BUILDKIT_STEP_LOG_MAX_SIZE=50000000
          env.BUILDKIT_STEP_LOG_MAX_SPEED=10000000

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Generate base image metadata
      id: base-meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.BASE_IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix=sha-
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value=stable,enable={{is_default_branch}}

    - name: Check if base image needs rebuild
      id: check-rebuild
      run: |
        PACKAGE_HASH=$(sha256sum organizer-app/package.json organizer-app/package-lock.json | sha256sum | cut -d' ' -f1)
        echo "package-hash=$PACKAGE_HASH" >> $GITHUB_OUTPUT
        
        # Check if image with this hash exists
        if docker manifest inspect ${{ env.REGISTRY }}/${{ env.BASE_IMAGE_NAME }}:pkg-$PACKAGE_HASH > /dev/null 2>&1; then
          echo "needs-rebuild=false" >> $GITHUB_OUTPUT
          echo "✅ Base image with package hash $PACKAGE_HASH already exists"
          
          # For scheduled runs, check if we should rebuild for security updates
          if [[ "${{ github.event_name }}" == "schedule" ]]; then
            # Check if the latest tag is older than 7 days
            LATEST_DATE=$(docker manifest inspect ${{ env.REGISTRY }}/${{ env.BASE_IMAGE_NAME }}:latest 2>/dev/null | jq -r '.history[0].v1Compatibility' | jq -r '.created' 2>/dev/null || echo "")
            if [[ -n "$LATEST_DATE" ]]; then
              LATEST_TIMESTAMP=$(date -d "$LATEST_DATE" +%s 2>/dev/null || echo "0")
              CURRENT_TIMESTAMP=$(date +%s)
              AGE_DAYS=$(( (CURRENT_TIMESTAMP - LATEST_TIMESTAMP) / 86400 ))
              
              if [[ $AGE_DAYS -gt 7 ]]; then
                echo "needs-rebuild=true" >> $GITHUB_OUTPUT
                echo "🔄 Base image is $AGE_DAYS days old, rebuilding for security updates"
              else
                echo "🆕 Base image is only $AGE_DAYS days old, skipping rebuild"
              fi
            else
              echo "needs-rebuild=true" >> $GITHUB_OUTPUT
              echo "🔄 Could not determine base image age, rebuilding for safety"
            fi
          fi
        else
          echo "needs-rebuild=true" >> $GITHUB_OUTPUT
          echo "❌ Base image with package hash $PACKAGE_HASH does not exist"
        fi

    - name: Build and push base image
      if: steps.check-rebuild.outputs.needs-rebuild == 'true' || github.event.inputs.force_rebuild == 'true'
      uses: docker/build-push-action@v5
      with:
        context: organizer-app
        file: organizer-app/Dockerfile.base
        platforms: linux/amd64
        push: true
        tags: |
          ${{ steps.base-meta.outputs.tags }}
          ${{ env.REGISTRY }}/${{ env.BASE_IMAGE_NAME }}:pkg-${{ steps.check-rebuild.outputs.package-hash }}
        labels: ${{ steps.base-meta.outputs.labels }}
        build-args: |
          BUILDKIT_INLINE_CACHE=1

    - name: Generate base image info
      if: steps.check-rebuild.outputs.needs-rebuild == 'true' || github.event.inputs.force_rebuild == 'true'
      run: |
        echo "### Base Image Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Image**: ${{ env.REGISTRY }}/${{ env.BASE_IMAGE_NAME }}:latest" >> $GITHUB_STEP_SUMMARY
        echo "- **Package Hash**: ${{ steps.check-rebuild.outputs.package-hash }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Tags**: ${{ steps.base-meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Trigger**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
        if [[ "${{ github.event_name }}" == "schedule" ]]; then
          echo "- **Rebuild Reason**: Daily security update check" >> $GITHUB_STEP_SUMMARY
        fi
        echo "- **Size**: $(docker image inspect ${{ env.REGISTRY }}/${{ env.BASE_IMAGE_NAME }}:latest --format='{{.Size}}' | numfmt --to=iec 2>/dev/null || echo 'Unknown')" >> $GITHUB_STEP_SUMMARY

    - name: Skip rebuild notification
      if: steps.check-rebuild.outputs.needs-rebuild == 'false' && github.event.inputs.force_rebuild != 'true'
      run: |
        echo "### Base Image Build Skipped" >> $GITHUB_STEP_SUMMARY
        echo "- **Reason**: Base image with package hash ${{ steps.check-rebuild.outputs.package-hash }} already exists" >> $GITHUB_STEP_SUMMARY
        echo "- **Existing Image**: ${{ env.REGISTRY }}/${{ env.BASE_IMAGE_NAME }}:pkg-${{ steps.check-rebuild.outputs.package-hash }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Trigger**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
        if [[ "${{ github.event_name }}" == "schedule" ]]; then
          echo "- **Note**: Scheduled rebuild skipped as base image is recent (less than 7 days old)" >> $GITHUB_STEP_SUMMARY
        fi

  notify-failure:
    runs-on: [self-hosted]
    if: failure()
    needs: [build-base-image]
    steps:
    - name: Notify on failure
      run: |
        echo "### ❌ Base Image Build Workflow Failed" >> $GITHUB_STEP_SUMMARY
        echo "- **Workflow**: ${{ github.workflow }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Run ID**: ${{ github.run_id }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY