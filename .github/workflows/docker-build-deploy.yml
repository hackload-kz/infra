name: Build and Deploy Docker Image

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      image_tag:
        description: 'Docker image tag to deploy'
        required: false
        default: ''

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: [self-hosted]
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    # Оптимизация: Кэширование Node.js зависимостей
    - name: Cache Node.js dependencies
      uses: actions/cache@v4
      with:
        path: |
          organizer-app/node_modules
          ~/.npm
          ~/.cache/npm
        key: npm-${{ runner.os }}-${{ hashFiles('organizer-app/package-lock.json') }}
        restore-keys: |
          npm-${{ runner.os }}-

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        # Оптимизация Buildx для быстрой сборки
        driver-opts: |
          network=host
          env.BUILDKIT_STEP_LOG_MAX_SIZE=50000000
          env.BUILDKIT_STEP_LOG_MAX_SPEED=10000000
        config-inline: |
          [worker.oci]
            max-parallelism = 4
          [worker.containerd]
            max-parallelism = 4

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    # Предварительно подгружаем кэш образа для лучшей производительности
    - name: Prime cache
      continue-on-error: true
      run: |
        docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest || true
        docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache || true

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix=sha-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: organizer-app
        file: organizer-app/Dockerfile.optimized
        # Оптимизация: собираем только AMD64 для быстроты (можно добавить ARM64 позже)
        platforms: linux/amd64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        # Многоуровневое кэширование с улучшенной конфигурацией
        cache-from: |
          type=gha,scope=buildkit-${{ github.ref_name }}
          type=gha,scope=buildkit-main
          type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache
        cache-to: |
          type=gha,mode=max,scope=buildkit-${{ github.ref_name }}
          type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache,mode=max
        # Оптимизация Docker Buildx
        build-args: |
          BUILDKIT_INLINE_CACHE=1
          BASE_IMAGE_TAG=${{ steps.check-base.outputs.base-image-tag }}
        # Увеличиваем параллелизм
        build-contexts: |
          alpine=docker-image://alpine:latest

    - name: Generate deployment artifact
      env:
        GITHUB_SHA: ${{ github.sha }}
      run: |
        echo "IMAGE_TAG=sha-${GITHUB_SHA::7}" >> deployment.env
        echo "IMAGE_URL=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:sha-${GITHUB_SHA::7}" >> deployment.env
    - name: Upload deployment artifact
      uses: actions/upload-artifact@v4
      with:
        name: deployment-info
        path: deployment.env

  deploy:
    runs-on: [self-hosted]
    needs: [build-and-push]
    if: github.ref == 'refs/heads/main'
    
    permissions:
      contents: read
      packages: read

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download deployment artifact
      uses: actions/download-artifact@v4
      with:
        name: deployment-info

    - name: Load deployment info
      run: |
        source deployment.env
        echo "IMAGE_TAG_FROM_BUILD=$IMAGE_TAG" >> $GITHUB_ENV

    - name: Determine image tag
      id: image_tag
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" && -n "${{ github.event.inputs.image_tag }}" ]]; then
          echo "tag=${{ github.event.inputs.image_tag }}" >> $GITHUB_OUTPUT
        else
          echo "tag=$IMAGE_TAG_FROM_BUILD" >> $GITHUB_OUTPUT
        fi

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Configure kubectl
      run: |
        mkdir -p ~/.kube
        echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > ~/.kube/config
        chmod 600 ~/.kube/config

    - name: Verify kubectl connection
      run: |
        kubectl cluster-info
        kubectl get nodes

    - name: Update email secrets
      run: |
        kubectl create secret generic email-secrets \
          --from-literal=SMTP_SERVER="${{ secrets.SMTP_SERVER }}" \
          --from-literal=SMTP_PORT="${{ secrets.SMTP_PORT }}" \
          --from-literal=SENDER_EMAIL="${{ secrets.SENDER_EMAIL }}" \
          --from-literal=SENDER_PASSWORD="${{ secrets.SENDER_PASSWORD }}" \
          --from-literal=SENDER_NAME="${{ secrets.SENDER_NAME }}" \
          -n hub \
          --dry-run=client -o yaml | kubectl apply -f -

    - name: Update deployment image
      run: |
        kubectl set image deployment/hub \
          hub=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.image_tag.outputs.tag }} \
          -n hub
        
        echo "Updated deployment with image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.image_tag.outputs.tag }}"

    - name: Wait for rollout
      run: |
        kubectl rollout status deployment/hub -n hub --timeout=300s

    - name: Verify deployment
      run: |
        kubectl get pods -n hub -l app=hub
        kubectl get deployment hub -n hub -o wide
        echo "Deployment successful!"

    - name: Get deployment info
      run: |
        echo "### Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Image**: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.image_tag.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Namespace**: hub" >> $GITHUB_STEP_SUMMARY
        echo "- **Deployment**: hub" >> $GITHUB_STEP_SUMMARY
        echo "- **Status**: $(kubectl get deployment hub -n hub -o jsonpath='{.status.conditions[?(@.type=="Available")].status}')" >> $GITHUB_STEP_SUMMARY
        echo "- **Ready Replicas**: $(kubectl get deployment hub -n hub -o jsonpath='{.status.readyReplicas}')/$(kubectl get deployment hub -n hub -o jsonpath='{.spec.replicas}')" >> $GITHUB_STEP_SUMMARY
